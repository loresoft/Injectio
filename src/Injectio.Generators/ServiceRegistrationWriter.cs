using Injectio.Generators.Extensions;

namespace Injectio.Generators;

public static class ServiceRegistrationWriter
{

    public static string GenerateExtensionClass(
        IReadOnlyList<ModuleRegistration> moduleRegistrations,
        IReadOnlyList<ServiceRegistration> serviceRegistrations,
        IReadOnlyList<StaticObjectRegistration> staticObjectRegistrations,
        string? assemblyName,
        string? methodName,
        string? methodInternal)
    {
        var codeBuilder = new IndentedStringBuilder();
        codeBuilder
            .AppendLine("// <auto-generated />")
            .AppendLine("#nullable enable")
            .AppendLine();

        codeBuilder
            .AppendLine("namespace Microsoft.Extensions.DependencyInjection")
            .AppendLine("{")
            .IncrementIndent()
            .AppendLine("/// <summary>")
            .AppendLine("/// Extension methods for discovered service registrations")
            .AppendLine("/// </summary>");

        codeBuilder
            .AppendLine("public static class DiscoveredServicesExtensions")
            .AppendLine("{")
            .IncrementIndent()
            .AppendLine("/// <summary>")
            .AppendLine($"/// Adds discovered services from {assemblyName ?? string.Empty} to the specified service collection")
            .AppendLine("/// </summary>")
            .AppendLine("/// <param name=\"serviceCollection\">The service collection.</param>")
            .AppendLine("/// <param name=\"tags\">The service registration tags to include.</param>")
            .AppendLine("/// <returns>The service collection</returns>")
            .Append("[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"")
            .Append(ThisAssembly.Product)
            .Append("\", \"")
            .Append(ThisAssembly.InformationalVersion)
            .AppendLine("\")]")
            .Append(string.Equals(methodInternal, "true") ? "internal" : "public")
            .Append(" static global::Microsoft.Extensions.DependencyInjection.IServiceCollection")
            .Append(" Add")
            .Append(methodName ?? "InjectioService")
            .AppendLine("(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, params string[]? tags)")
            .AppendLine("{")
            .IncrementIndent();


        codeBuilder
            .AppendLine("var tagSet = new global::System.Collections.Generic.HashSet<string>(tags ?? global::System.Linq.Enumerable.Empty<string>());")
            .AppendLine();

        var moduleCount = 1;

        foreach (var moduleRegistration in moduleRegistrations)
        {
            moduleCount = WriteModule(codeBuilder, moduleRegistration, moduleCount);
        }

        foreach (var serviceRegistration in serviceRegistrations)
        {
            WriteRegistration(codeBuilder, serviceRegistration);
        }

        foreach (var staticObjectRegistration in staticObjectRegistrations)
        {
            WriteRegistration(codeBuilder, staticObjectRegistration);
        }

        codeBuilder
            .AppendLine("return serviceCollection;")
            .DecrementIndent()
            .AppendLine("}") // method
            .DecrementIndent()
            .AppendLine("}") // class
            .DecrementIndent()
            .AppendLine("}"); // namespace

        return codeBuilder.ToString();
    }

    private static int WriteModule(
        IndentedStringBuilder codeBuilder,
        ModuleRegistration moduleRegistration,
        int moduleCount)
    {
        if (moduleRegistration.IsStatic)
        {
            codeBuilder
                .AppendIf("global::", !moduleRegistration.ClassName.StartsWith("global::"))
                .Append(moduleRegistration.ClassName)
                .Append('.')
                .Append(moduleRegistration.MethodName)
                .Append("(")
                .Append("serviceCollection")
                .AppendIf(", tagSet", moduleRegistration.HasTagCollection)
                .Append(");")
                .AppendLine()
                .AppendLine();
        }
        else
        {
            codeBuilder
                .Append("var module")
                .Append($"{moduleCount:0000}")
                .Append(" = new ")
                .AppendIf("global::", !moduleRegistration.ClassName.StartsWith("global::"))
                .Append(moduleRegistration.ClassName)
                .AppendLine("();");

            codeBuilder
                .Append("module")
                .Append($"{moduleCount:0000}")
                .Append('.')
                .Append(moduleRegistration.MethodName)
                .Append("(")
                .Append("serviceCollection")
                .AppendIf(", tagSet", moduleRegistration.HasTagCollection)
                .Append(");")
                .AppendLine()
                .AppendLine();

            moduleCount++;
        }

        return moduleCount;
    }

    private static void WriteRegistration(
        IndentedStringBuilder codeBuilder,
        StaticObjectRegistration staticObjectRegistration)
    {
        var hasTags = staticObjectRegistration.Tags.Count > 0;
        if (hasTags)
        {
            WriteFileLine(codeBuilder, staticObjectRegistration.FileLine);
            codeBuilder
                .Append("if (tagSet.Count == 0 || tagSet.Intersect(new[] { ");

            bool wroteTag = false;
            foreach (var tag in staticObjectRegistration.Tags)
            {
                if (wroteTag)
                    codeBuilder.Append(", ");

                codeBuilder
                    .Append("\"")
                    .Append(tag)
                    .Append("\"");

                wroteTag = true;
            }

            codeBuilder
                .AppendLine(" }).Any())")
                .AppendLine("{")
                .IncrementIndent();
        }

        var serviceMethod = GetServiceCollectionMethod(staticObjectRegistration.Duplicate);

        foreach (var serviceType in staticObjectRegistration.ServiceTypes)
        {
            if (serviceType.IsNullOrWhiteSpace())
                continue;

            WriteFileLine(codeBuilder, staticObjectRegistration.FileLine);
            WriteServiceType(codeBuilder, staticObjectRegistration, serviceMethod, serviceType);
        }

        if (hasTags)
        {
            codeBuilder
                .DecrementIndent()
                .AppendLine("}")
                .AppendLine();
        }
    }

    private static void WriteRegistration(
        IndentedStringBuilder codeBuilder,
        ServiceRegistration serviceRegistration)
    {
        if (serviceRegistration.Tags.Count > 0)
        {
            WriteFileLine(codeBuilder, serviceRegistration.FileLine);
            codeBuilder
                .Append("if (tagSet.Count == 0 || tagSet.Intersect(new[] { ");

            bool wroteTag = false;
            foreach (var tag in serviceRegistration.Tags)
            {
                if (wroteTag)
                    codeBuilder.Append(", ");

                codeBuilder
                    .Append("\"")
                    .Append(tag)
                    .Append("\"");

                wroteTag = true;
            }

            codeBuilder
                .AppendLine(" }).Any())")
                .AppendLine("{")
                .IncrementIndent();
        }

        var serviceMethod = GetServiceCollectionMethod(serviceRegistration.Duplicate);

        foreach (var serviceType in serviceRegistration.ServiceTypes)
        {
            if (serviceType.IsNullOrWhiteSpace())
                continue;

            WriteFileLine(codeBuilder, serviceRegistration.FileLine);
            if (serviceRegistration.IsOpenGeneric)
                WriteServiceType(codeBuilder, serviceRegistration, serviceMethod, serviceType);
            else
                WriteServiceGeneric(codeBuilder, serviceRegistration, serviceMethod, serviceType);
        }

        if (serviceRegistration.Tags.Count > 0)
        {
            codeBuilder
                .DecrementIndent()
                .AppendLine("}")
                .AppendLine();
        }
    }

    private static void WriteServiceType(
        IndentedStringBuilder codeBuilder,
        StaticObjectRegistration staticObjectRegistration,
        string serviceMethod,
        string serviceType)
    {
        var describeMethod = GetStaticObjectDescriptorMethod(staticObjectRegistration);

        codeBuilder
            .Append(
                "global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.")
            .Append(serviceMethod)
            .AppendLine("(")
            .IncrementIndent()
            .AppendLine("serviceCollection,")
            .Append("global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.")
            .Append(describeMethod)
            .Append("<")
            .AppendIf("global::", !serviceType.StartsWith("global::"))
            .Append(serviceType)
            .Append(">")
            .Append("(");

        if (staticObjectRegistration.ServiceKey.HasValue())
        {
            codeBuilder.Append(staticObjectRegistration.ServiceKey);
            codeBuilder.Append(", ");
        }

        codeBuilder
            .AppendIf("global::", !staticObjectRegistration.ClassName.StartsWith("global::"))
            .Append(staticObjectRegistration.ClassName)
            .Append(".")
            .Append(staticObjectRegistration.MemberName)
            .AppendLine(")")
            .DecrementIndent();

        codeBuilder
            .AppendLine(");")
            .AppendLine();
    }

    private static void WriteServiceType(
        IndentedStringBuilder codeBuilder,
        ServiceRegistration serviceRegistration,
        string serviceMethod,
        string serviceType)
    {
        var describeMethod = GetServiceDescriptorMethod(serviceRegistration);

        codeBuilder
            .Append("global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.")
            .Append(serviceMethod)
            .AppendLine("(")
            .IncrementIndent()
            .AppendLine("serviceCollection,")
            .Append("global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.")
            .Append(describeMethod)
            .AppendLine("(")
            .IncrementIndent()
            .Append("typeof(")
            .AppendIf("global::", !serviceType.StartsWith("global::"))
            .Append(serviceType)
            .AppendLine("),");

        if (serviceRegistration.ServiceKey.HasValue())
        {
            codeBuilder
                .Append(serviceRegistration.ServiceKey)
                .AppendLine(",");
        }

        if (serviceRegistration.Factory.HasValue())
        {
            bool hasNamespace = serviceRegistration.Factory?.Contains(".") == true;

            codeBuilder
                .AppendIf(serviceRegistration.ImplementationType, !hasNamespace)
                .AppendIf(".", !hasNamespace)
                .Append(serviceRegistration.Factory);
        }
        else if (serviceRegistration.ImplementationType.HasValue())
        {
            codeBuilder
                .Append("typeof(")
                .AppendIf("global::", !serviceRegistration.ImplementationType.StartsWith("global::"))
                .Append(serviceRegistration.ImplementationType)
                .Append(')');
        }
        else
        {
            codeBuilder
                .Append("typeof(")
                .AppendIf("global::", !serviceType.StartsWith("global::"))
                .Append(serviceType)
                .Append(')');
        }

        codeBuilder
            .AppendLine()
            .DecrementIndent()
            .AppendLine(")")
            .DecrementIndent()
            .AppendLine(");")
            .AppendLine();
    }

    private static void WriteServiceGeneric(
        IndentedStringBuilder codeBuilder,
        ServiceRegistration serviceRegistration,
        string serviceMethod,
        string serviceType)
    {
        var describeMethod = GetServiceDescriptorMethod(serviceRegistration);

        var implementationType = serviceRegistration.ImplementationType.HasValue()
            ? serviceRegistration.ImplementationType
            : serviceType;

        codeBuilder
            .Append("global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.")
            .Append(serviceMethod)
            .AppendLine("(")
            .IncrementIndent()
            .AppendLine("serviceCollection,")
            .Append("global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.")
            .Append(describeMethod)
            .Append("<")
            .AppendIf("global::", !serviceType.StartsWith("global::"))
            .Append(serviceType);

        // don't include the implementation type if there is factory
        if (serviceRegistration.Factory.IsNullOrEmpty())
        {
            codeBuilder
                .Append(", ")
                .AppendIf("global::", !implementationType.StartsWith("global::"))
                .Append(implementationType);
        }

        codeBuilder.Append(">(");

        // write service key argument
        if (serviceRegistration.ServiceKey.HasValue())
            codeBuilder.Append(serviceRegistration.ServiceKey);

        // write factory method
        if (serviceRegistration.Factory.HasValue())
        {
            bool hasNamespace = serviceRegistration.Factory?.Contains(".") == true;

            codeBuilder
                .AppendIf(", ", serviceRegistration.ServiceKey.HasValue()) // second argument if there is a service key
                .AppendIf(serviceRegistration.ImplementationType, !hasNamespace)
                .AppendIf(".", !hasNamespace)
                .Append(serviceRegistration.Factory);
        }
        else if (serviceRegistration.Registration == KnownTypes.RegistrationStrategySelfWithProxyFactoryShortName
            && serviceRegistration.ImplementationType != serviceType)
        {
            codeBuilder
                .AppendIf(", ", serviceRegistration.ServiceKey.HasValue())
                .AppendLine()
                .IncrementIndent()
                .Append("(serviceProvider")
                .AppendIf(", key", serviceRegistration.ServiceKey.HasValue())
                .Append(") => global::Microsoft.Extensions.DependencyInjection.ServiceProvider")
                .Append(serviceRegistration.ServiceKey.HasValue()
                    ? "KeyedServiceExtensions.GetRequiredKeyedService<"
                    : "ServiceExtensions.GetRequiredService<")
                .AppendIf("global::", !serviceRegistration.ImplementationType.StartsWith("global::"))
                .Append(serviceRegistration.ImplementationType)
                .Append(">(serviceProvider")
                .AppendIf(", key", serviceRegistration.ServiceKey.HasValue())
                .Append(")")
                .AppendLine()
                .DecrementIndent();
        }

        codeBuilder
            .AppendLine(")")
            .DecrementIndent()
            .AppendLine(");")
            .AppendLine();
    }

    private static void WriteFileLine(
        IndentedStringBuilder codeBuilder,
        FileLine? fileLine)
    {
        if (fileLine is null || fileLine.FilePath.IsNullOrWhiteSpace())
            return;

        codeBuilder.Append("//");
        codeBuilder.Append("generated from file: ");
        codeBuilder.Append(fileLine.FilePath);
        codeBuilder.Append(":");
        codeBuilder.Append(fileLine.Line);
        codeBuilder.AppendLine();
    }

    public static string GetServiceCollectionMethod(string duplicateStrategy)
    {
        return duplicateStrategy switch
        {
            KnownTypes.DuplicateStrategySkipShortName => "TryAdd",
            KnownTypes.DuplicateStrategySkipTypeName => "TryAdd",
            KnownTypes.DuplicateStrategyReplaceShortName => "Replace",
            KnownTypes.DuplicateStrategyReplaceTypeName => "Replace",
            KnownTypes.DuplicateStrategyAppendShortName => "Add",
            KnownTypes.DuplicateStrategyAppendTypeName => "Add",
            _ => "TryAdd"
        };
    }

    public static string GetStaticObjectDescriptorMethod(StaticObjectRegistration serviceRegistration)
    {
        //currently support Singleton only.
        var describeMethod =  "Singleton";

        return serviceRegistration.ServiceKey.HasValue()
            ? $"Keyed{describeMethod}"
            : describeMethod;
    }

    public static string GetServiceDescriptorMethod(ServiceRegistration serviceRegistration)
    {
        var describeMethod = serviceRegistration.Lifetime switch
        {
            KnownTypes.ServiceLifetimeSingletonFullName => "Singleton",
            KnownTypes.ServiceLifetimeScopedFullName => "Scoped",
            KnownTypes.ServiceLifetimeTransientFullName => "Transient",
            _ => "Transient"
        };

        return serviceRegistration.ServiceKey.HasValue()
            ? $"Keyed{describeMethod}"
            : describeMethod;
    }
}
